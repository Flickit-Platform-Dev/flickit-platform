# Generated by Django 4.1 on 2024-07-02 14:56

import account.services.utils_services
import common.validators
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('email', models.EmailField(error_messages={'unique': 'A user with this email address already exists.'}, max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('display_name', models.CharField(max_length=255)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('picture', models.ImageField(null=True, upload_to='user/images', validators=[common.validators.validate_file_size])),
                ('bio', models.CharField(max_length=400, null=True)),
                ('linkedin', models.URLField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'fau_user',
            },
        ),
        migrations.CreateModel(
            name='Space',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default=account.services.utils_services.create_new_code_number, max_length=50, unique=True)),
                ('title', models.CharField(max_length=100)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('last_modification_date', models.DateTimeField(auto_now=True, db_column='last_modification_time')),
                ('created_by', models.ForeignKey(db_column='created_by', on_delete=django.db.models.deletion.CASCADE, related_name='spaces_created', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(db_column='last_modified_by', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='spaces_owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'fau_space',
            },
        ),
        migrations.CreateModel(
            name='UserAccess',
            fields=[
                ('space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='account.space')),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(db_column='created_by', on_delete=django.db.models.deletion.CASCADE, related_name='created_space_user_access', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'fau_space_user_access',
                'unique_together': {('space', 'user')},
            },
        ),
        migrations.AddField(
            model_name='space',
            name='users',
            field=models.ManyToManyField(related_name='spaces', through='account.UserAccess', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='SpaceInvitee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('expiration_date', models.DateTimeField()),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(db_column='created_by', on_delete=django.db.models.deletion.CASCADE, related_name='space_invitee', to=settings.AUTH_USER_MODEL)),
                ('space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitees', to='account.space')),
            ],
            options={
                'db_table': 'fau_space_invitee',
                'unique_together': {('space', 'email')},
            },
        ),
    ]
